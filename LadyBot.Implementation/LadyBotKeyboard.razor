@inject LadyBotProgram Program
@inject LadyBotProgramState ProgramState
@inject LadyBotController Controller
@inject LadyBotMap Map

<div class="keyboard">
    <img src="_content/LadyBot.Implementation/icons/delete.svg" class="icon-left" @onclick="() => this.Program.Reset()" />
    @if (this.ProgramState.Running)
    {
        <img src="_content/LadyBot.Implementation/icons/stop.svg" class="icon-right" @onclick="this.Controller.StopProgram" />
    }
    else
    {
        <img src="_content/LadyBot.Implementation/icons/play.svg" class="icon-right" @onclick="this.Controller.RunProgramAsync" />
    }

    @switch (this.Map.KeyboardType)
    {
        case KeyboardType.Directional:
            <img src="_content/LadyBot.Implementation/commands/move_up.svg" class="top" @onclick="() => this.Program.AddCommand(LadyBotCommand.MoveUp)" />
            <img src="_content/LadyBot.Implementation/commands/move_down.svg" class="bottom" @onclick="() => this.Program.AddCommand(LadyBotCommand.MoveDown)" />
            <img src="_content/LadyBot.Implementation/commands/move_left.svg" class="bottom-left" @onclick="() => this.Program.AddCommand(LadyBotCommand.MoveLeft)" />
            <img src="_content/LadyBot.Implementation/commands/move_right.svg" class="bottom-right" @onclick="() => this.Program.AddCommand(LadyBotCommand.MoveRight)" />
            break;
        case KeyboardType.Rotational:
            <img src="_content/LadyBot.Implementation/commands/move_up.svg" class="top" @onclick="() => this.Program.AddCommand(LadyBotCommand.MoveForward)" />
            <img src="_content/LadyBot.Implementation/commands/rotate_left.svg" class="bottom-left" @onclick="() => this.Program.AddCommand(LadyBotCommand.RotateLeft)" />
            <img src="_content/LadyBot.Implementation/commands/rotate_right.svg" class="bottom-right" @onclick="() => this.Program.AddCommand(LadyBotCommand.RotateRight)" />
            break;
        default:
            throw new ArgumentOutOfRangeException();
    }
</div>

@code
{
    #region Overrides of ComponentBase

    protected override void OnInitialized()
    {
        base.OnInitialized();

        this.ProgramState.OnCurrentChanged += this.StateHasChanged;
    }

    #endregion
}
